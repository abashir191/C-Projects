import re
from functools import *

"""

A LL recursive descent parser for validating simple expressions.

You would need to first write the grammar rules (non-terminal) in EBNF according to the token
patterns and grammar rules specified in Assignment 2 Task A.
You can then follow the examples of the parsing procedure pseudocode implementation in Figure 5.17
in the textbook to write the recursive descent parsing procedures for the validation parsing.

The following recursive descent parsing algorithm is a LL parser. It implements one parsing
procedure for each one of the above non-terminals (grammar rules), starting from the top of the
parse tree, then drilling into lower hierachical levels.

The procedures work together to handle all combinations of the grammar rules, and they
automatically handle the nested compositions of terms with multi-level priority brackets.

---------------------------------------------------------------------
Usage

r = recDescent('7 - 17')
print(r.validate()) # will print True as '7 - 17' is a valid expression

r = recDescent('7 - ')
print(r.validate()) # will print False as '7 - ' is an invalid expression

"""


class recDescent:
    # relational (unary) operators (prefix)
    relop = ['<', '>', '<=', '>=', '=', '!=', 'not']

    # binary operators (infix)
    dashop = ['-', 'â€“']
    logicop = ['and', 'or']

    # tokens for manipulating priority
    priopen = '('
    priclose = ')'

    # constructor to initialize and set class level variables
    def __init__(self, expr=""):

        # string to be parsed
        self.expr = expr

        # tokens from lexer tokenization of the expression
        self.tokens = []

    # lexer - tokenize the expression into a list of tokens
    # the tokens are stored in an list which can be accessed by self.tokens
    # do not edit any piece of code in this function
    def lex(self):
        self.tokens = re.findall(
            "[-\(\)=]|[!<>]=|[<>]|\w+|[^ +]\W+", self.expr)
        # filter out the possible spaces in the elements
        self.tokens = list(filter((lambda x: len(x)),
                                  list(map((lambda x: x.strip().lower()), self.tokens))))

    # parser - determine if the input expression is valid or not

    # validate() function will return True if the expression is valid, False otherwise
    # do not change the method signature as this function will be called by the autograder

    def validate(self):
        # use your parsing procedures below to validate
        # pass
        self.lex()
        return self.checkEXP(index=0)
    
    # parsing procedures corresponding to the grammar rules - follow Figure 5.17

    def checkEXP(self, index):
        found = False
        # print(index)
        if self.checkTERM(index):
            found = True
            index += 1
            while (self.tokens[index] == self.logicop) and (found == True):
                index += 1
                # print(index)
                if not (self.checkTERM(index)):
                    found = False
                else:
                    index += 1
                    # pass
        if found:
            return True
        else:
            return False

        print(index)

    def checkTERM(self, index):
        found = False
        if self.tokens[index].isdigit(): # check if an int
            found = True
            index += 1
            while (self.tokens[index] == self.dashop) and (found == True):
                index += 1
                if not (self.tokens[index].isdigit()): # if not an int
                    found = False
                else:
                    index += 1
        
        # elif self.tokens[index] == self.relop:
        #     self.checkRELOP()
        
        if found == True:
            return True
        else:
            return False

    def checkRELOP(self):
        found = False
        index = 1
        if self.tokens[index].isdigit():
            found = True
        else:
            found = False
        
        if found == True:
            return True
        else:
            return False
        
        print(found)

r = recDescent('- 7')
print(r.validate())
